<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   showStatusBar="false"
					   creationComplete="onInit()"
					   >
	<fx:Declarations>
		<fx:int id="numAttempts">0</fx:int>
		<fx:Number id="numRate">0</fx:Number>
		<fx:int id="numErrors">0</fx:int>
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace local "*";
		@font-face {
			src:url("../../src/fonts/MyriadWebPro.ttf");
			fontFamily: embeddedMyriad;
			embedAsCFF: true;
		}	
		@font-face {
			src:url("../../src/fonts/MyriadWebPro-Bold.ttf");
			fontFamily: embeddedMyriad;
			font-weight:bold;
			embedAsCFF: true;
		}
		local|UrlHammer 
		{
			font-size:16pt;
			font-family:embeddedMyriad;
		}
	</fx:Style>
	<s:layout>
		<s:VerticalLayout paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5"/>
	</s:layout>
	<s:HGroup width="100%">
		<s:Label height="100%" verticalAlign="middle" text="URL:"/>
		<s:TextInput width="100%" id="URL" text="https://feedtest.nascar.com:8530/NASCARScoring/GetPassingsData?accesstoken=svision875234190" focusOut="saveSettings()"/>
	</s:HGroup>
	<s:HGroup>
		<s:Label height="100%" verticalAlign="middle" text="Frequency (ms):"/>
		<s:NumericStepper id="frequency" value="1000" minimum="50" maximum="60000" stepSize="50" focusOut="saveSettings()"/>
		<s:ToggleButton height="100%" change="onToggleRun()" id="run" label="Run"/>
		<s:Button height="100%" color="#cc0000" label="Clear" click="clear()"/>
	</s:HGroup>
	<s:Line width="100%"><s:stroke><s:SolidColorStroke color="#dddddd" alpha="0.7"/></s:stroke></s:Line>
	<s:VGroup width="100%" id="logFileGroup" enabled="{!run.selected}">
		<s:CheckBox id="logToFile" label="Log To File" change="saveSettings()"/>
		<s:CheckBox id="timestamps" label="Insert UTC Timestamps" enabled="{logToFile.selected}" selected="true" change="saveSettings()"/>
		<s:HGroup width="100%">
			<s:Button height="100%" label="Browse..." click="onBrowseToFile()" enabled="{logToFile.selected}"/>
			<s:TextInput id="logFile" width="100%" enabled="{logToFile.selected}" prompt="click Browse to choose a file" focusOut="saveSettings()"/>
		</s:HGroup>
	</s:VGroup>
	<s:Line width="100%"><s:stroke><s:SolidColorStroke color="#dddddd" alpha="0.7"/></s:stroke></s:Line>
	<s:Form>
		<s:FormItem label="Attempts:">
			<s:Label id="attempts" text="{numAttempts}"/>
		</s:FormItem>
		<s:FormItem label="Errors:">
			<s:Label id="errors" text="{numErrors}"/>
		</s:FormItem>
		<s:FormItem label="Actual Call Time (avg. ms):">
			<s:Label id="rate" text="{numRate}"/>
		</s:FormItem>
	</s:Form>
	<s:Line width="100%"><s:stroke><s:SolidColorStroke color="#dddddd" alpha="0.7"/></s:stroke></s:Line>
	<s:Label text="Error log:"/>
	<s:TextArea id="errorLog" width="100%" height="100%"/>
	<fx:Script>
		<![CDATA[
			import flash.utils.getTimer;
			
			import mx.controls.Alert;
			private function onInit():void
			{
				var rect:Rectangle = new Rectangle;
				
				rect.width = Capabilities.screenResolutionX * 0.7;
				rect.height = Capabilities.screenResolutionY * 0.7;
				rect.x = (Capabilities.screenResolutionX - rect.width) / 2;
				rect.y = (Capabilities.screenResolutionY - rect.height) / 2;
				nativeWindow.bounds = rect;
				
				loadSettings();
			}
			static private function get settings():SharedObject
			{
				return SharedObject.getLocal("UrlHammer.3");
			}
			private function loadSettings():void
			{
				var so:SharedObject = settings;
				if (so.data.URL)
				{
					URL.text = so.data.URL;
				}
				if (so.data.freq && !isNaN(so.data.freq))
				{
					frequency.value = so.data.freq; 
				}
				logToFile.selected = so.data.logToFile;
				if (so.data.timestamps != undefined)
				{
					timestamps.selected = so.data.timestamps;
				}
				if (so.data.logFile)
				{
					logFile.text = so.data.logFile;
				}
			}
			private function saveSettings():void
			{
				var so:SharedObject = settings;
				so.data.URL = URL.text;
				so.data.freq = frequency.value;
				so.data.logToFile = logToFile.selected;
				so.data.timestamps = timestamps.selected;
				so.data.logFile = logFile.text;
				so.flush();
			}
			private var _timer:Timer = new Timer(1000, 1);
			private function onToggleRun():void
			{
				if (run.selected)
				{
					openLogFile();
					next();
				}
				else
				{
					closeLogFile();
				}
			}
			private var _loader:URLLoader = new URLLoader;
			private var _lastAttempt:int = 0;
			private var _times:Vector.<int> = new Vector.<int>;
			private function onTimer(e:Event = null):void
			{
				var request:URLRequest = new URLRequest(URL.text);
				_loader.addEventListener(Event.COMPLETE, onLoaded, false, 0, true);
				_loader.addEventListener(IOErrorEvent.IO_ERROR, onError, false, 0, true);
				_loader.load(request);
				
				_times.push(getTimer());
				if (_times.length > 10)
				{
					_times.shift();
				}
				if (_times.length > 1)
				{
					numRate = (_times[_times.length-1]-_times[0]) / _times.length;
				}
				++numAttempts;
			}
			private function onLoaded(e:Event):void
			{
				if (_log)
				{
					var loader:URLLoader = URLLoader(e.target);
					if (timestamps.selected)
					{
						const date:Date = new Date();
						_log.writeUTFBytes(date.toUTCString() + ", stamp: " + date.time + "\r\n");
					}
					_log.writeUTFBytes(loader.data + "\r\n");
				}
				next();
			}
			private function onError(e:IOErrorEvent):void
			{
				++numErrors;
				errorLog.text += e + "\n";
				next();
			}
			private function next():void
			{
				if (run.selected)
				{
					const elapsed:int = _times.length ? (getTimer() - _times[_times.length-1]) : 0;
					const timeRemaining:int = frequency.value - elapsed;
					if (timeRemaining > 0)
					{
						_timer.delay = timeRemaining;
						_timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimer, false, 0, true);
						_timer.start();
					}
					else
					{
						onTimer();
					}
				}
			}
			private function clear():void
			{
				run.selected = false;
				numAttempts = 0;
				numErrors = 0;
				numRate = 0;
				
				errorLog.text = "";
			}
			private function onBrowseToFile():void
			{
				var file:File = new File;
				file.browseForSave(logFile.text.length ? logFile.text : "hammer.log");
				file.addEventListener(Event.SELECT, function(e:Event):void 
				{
					logFile.text = File(e.target).nativePath;
					saveSettings();
				});
			}
			private var _log:FileStream;
			private function openLogFile():void
			{
				if (!_log)
				{
					var file:File = new File(logFile.text);
					var stream:FileStream = new FileStream;
					try
					{
						stream.open(file, FileMode.WRITE);
						_log = stream;
					}
					catch (e:Error)
					{
						Alert.show("Could not open file " + logFile.text + " error " + e, "File Open Error");
					}
				}
			}
			private function closeLogFile():void
			{
				if (_log)
				{
					_log.close();
					_log = null;
				}
			}
		]]>
	</fx:Script>
</s:WindowedApplication>
