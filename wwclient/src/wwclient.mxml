<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:local="*"
			   implements="IProtocolHandler"
			   addedToStage="onComplete()"
>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace local "*";
		local|wwclient
		{
			font-family: "embeddedMyriad";
			font-size: 13;
		}
		.letterTileStyle, .letterTileStyleMarked
		{
			color: #cccccc;
			font-family: "embeddedMyriad";
			font-weight:bold;
			font-size: 36;
		}
		.letterTileStyleMarked
		{
			color: #ff0000;
		}	
		.wordEntry
		{
			font-family: "embeddedMyriad";
			font-size: 18;
			font-weight:bold;
		}
		.chatLog
		{
			font-family: "embeddedMyriad";
		}
		.textInputLabel
		{
			vertical-align: middle;
		}
		@font-face {
			src:url("../../src/fonts/MyriadWebPro.ttf");
			fontFamily: embeddedMyriad;
			embedAsCFF: true;
		}	
		@font-face {
			src:url("../../src/fonts/MyriadWebPro-Bold.ttf");
			fontFamily: embeddedMyriad;
			font-weight:bold;
			embedAsCFF: true;
		}	
	</fx:Style>
	<s:layout><s:VerticalLayout paddingBottom="10" paddingTop="10" paddingRight="10" paddingLeft="10" /></s:layout>
	<s:Group width="100%">
		<s:layout><s:BasicLayout/></s:layout>
		<s:VGroup>
			<local:LetterGrid left="0" id="letterGrid"/>
			<s:HGroup width="100%">
				<s:Label height="100%" text="Submit Word:" styleName="textInputLabel"/>
				<s:TextInput id="wordEntry" width="100%" styleName="wordEntry" textAlign="center" typographicCase="uppercase"/>
			</s:HGroup>
		</s:VGroup>
		<s:DataGrid right="0" id="wordHistory" height="100%" color="#dddddd" alternatingRowColors="[#66829f,#486781]" verticalScrollPolicy="on" skinClass="WordHistoryGridSkin" tabFocusEnabled="false">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn minWidth="45" maxWidth="100" headerText="Time" dataField="time"/>
					<s:GridColumn minWidth="100" maxWidth="150" headerText="Player" dataField="player"/>
					<s:GridColumn minWidth="100" maxWidth="150" headerText="Word" dataField="word"/>
					<s:GridColumn minWidth="40" maxWidth="100" headerText="Score" dataField="score">
						<s:itemRenderer>
							<fx:Component>
								<s:DefaultGridItemRenderer
									fontWeight="bold"
									textAlign="right"
								/>
							</fx:Component>
						</s:itemRenderer>
					</s:GridColumn>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:Group>
	<s:HGroup width="100%" height="100%">
		<s:List id="playerList" height="100%"  tabFocusEnabled="false"/>
		<s:VGroup width="100%" height="100%">
			<s:HGroup width="100%">
				<s:Label text="Chat:" height="100%" verticalAlign="middle"/>
				<s:TextInput id="chatInput" width="100%" keyDown="onChatKeyDown(event)"/>
			</s:HGroup>
			<s:TextArea id="chatLog" styleName="chatLog" width="100%" height="100%" tabFocusEnabled="false" editable="false"/>
		</s:VGroup>
	</s:HGroup>
	<fx:Script>
		<![CDATA[
			import flash.utils.getTimer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			
			import spark.events.TextOperationEvent;
			import spark.filters.DropShadowFilter;

			private var _protocol:Protocol = new Protocol;
			static private const DROP:Array = [ new DropShadowFilter(3, 45, 0xffffff, 0.4) ]; 
			private function onComplete():void
			{
				wordEntry.setFocus();
				
				wordEntry.addEventListener(KeyboardEvent.KEY_DOWN, onWordEntryKeydown, false, 0, true);
				wordEntry.addEventListener(TextOperationEvent.CHANGE, onWordEntryChange, false, 0, true);
				wordHistory.dataProvider = _wordHistoryData;
				playerList.dataProvider = _playerListData;
				
				wordHistory.filters = DROP;
				
				_protocol.handler = this;
			}

			private var _lastValidWord:String;
			private static const ENTER_CODE:int = 10;
			private function onWordEntryChange(e:Event):void
			{
//				trace(e);
				// seems like a bug in flex = when hitting enter, the keydown event arrives after
				if (!wordEntry.text.length || (wordEntry.text.length && wordEntry.text.charCodeAt(wordEntry.text.length - 1) != ENTER_CODE))
				{
					_lastValidWord = wordEntry.text.toUpperCase();
					letterGrid.letters.path = _lastValidWord; 
				}
			}
			private static const ESC_KEY:int = 27;
			private static const ENTER_KEY:int = 13;
			private function onWordEntryKeydown(e:KeyboardEvent):void
			{
//				trace(e);
				switch(e.keyCode) {
				case ESC_KEY:
					wordEntry.text = "";
					onWordEntryChange(null);
					break;
				case ENTER_KEY:
					if (letterGrid.letters.containsCurrentPath)
					{
						_protocol.submitWord(_lastValidWord);
					}
					wordEntry.text = "";
					letterGrid.letters.path = ""; 
					break;
				}
			}

			private function onChatKeyDown(e:KeyboardEvent):void
			{
				if (e.charCode == Keyboard.ENTER && chatInput.text.length)
				{
					const chatText:String = chatInput.text;
					chatInput.text = null;
					
					_protocol.submitChat(chatText);
				}
			}
			
			// IProtocolHandler
			private var _wordHistoryData:ArrayCollection = new ArrayCollection;
			public function scoreWord(player:String, word:String, points:int):void
			{
				const ticks:uint = getTimer();
				const min:String = String(int(ticks/60000));
				const sec:uint = ticks/1000 % 60;
				
				//KAI: give that a type so that it can be profiled
				_wordHistoryData.addItem(
					{
						player: player,
						word: word,
						score: points,
						time: min + ":" + (sec < 10 ? ("0" + sec) : String(sec)) 
					}
				);
				_wordHistoryData.refresh();
				wordHistory.ensureCellIsVisible(_wordHistoryData.length - 1);
//				wordHistory.grid.verticalScrollPosition = wordHistory.grid.contentHeight - wordHistory.grid.height + 10;
			}

			private var _playerListData:ArrayList = new ArrayList;
			public function addPlayer(player:String, points:int):void
			{
				_playerListData.addItem({ label: player });
			}
			public function chatText(player:String, text:String):void
			{
				chatLog.text += player + ": " + text + "\n";
				
//				chatLog.scrollToRange();
				chatLog.scroller.verticalScrollBar.value = chatLog.scroller.verticalScrollBar.maximum;
			}
			public function removePlayer(player:String, points:int):void
			{
			}
			
		]]>
	</fx:Script>
</s:Application>
