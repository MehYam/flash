<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:ui="ui.*"
		  paddingTop="5"
		  paddingBottom="5"
		  paddingLeft="5"
		  paddingRight="5"
		  creationComplete="updateDeleteButton()"
		  >
	<fx:Declarations>
		<fx:Component id="priceColumnRenderer">
			<s:DefaultGridItemRenderer
				textAlign="right"
				/>
		</fx:Component>
	</fx:Declarations>
	<s:VGroup width="50%" height="100%">
		<s:HGroup width="100%">
			<s:Label text="Search:" height="100%" verticalAlign="middle"/>
			<s:TextInput id="filter" width="100%" height="100%" prompt="enter search term" change="onFilterChange()"/>
			<s:Line height="{Data.BAR_HEIGHT}">
				<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
			</s:Line>
			<ui:Button label="ADD NEW" height="100%" styleName="commandButton" click="onAddItem()"/>
			<ui:Button id="deleteButton" label="DELETE" height="100%" styleName="deleteButton" click="onDeleteItem()"/>
		</s:HGroup>
		<s:DataGrid
			id="items"
			width="100%" height="100%" 
			sortableColumns="true" 
			dataProvider="{Data.instance.inventoryItems}"
			editable="true"
			gridItemEditorSessionSave="onItemEditted()"
			selectionChange="updateDeleteButton()"
			>
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="id" headerText="ID" editable="false"/>
					<s:GridColumn dataField="name" headerText="Item"/>
					<s:GridColumn dataField="category" headerText="Type">
						<s:itemEditor>
							<fx:Component>
								<ui:DropDownListGridItemEditor dataProvider="{Data.instance.inventoryItemCats}">
									<fx:Script>
										<![CDATA[
											import data.Data;
										]]>
									</fx:Script>
								</ui:DropDownListGridItemEditor>
							</fx:Component>
						</s:itemEditor>
					</s:GridColumn>
					<s:GridColumn dataField="price" headerText="Price"  formatter="{Utils.currencyFormatter}" headerRenderer="CustomGridHeaderRenderer" itemRenderer="{priceColumnRenderer}"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:VGroup>
	<s:Line height="100%">
		<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
	</s:Line>
	<s:VGroup width="50%" height="100%">
		<ui:Button label="BULK IMPORT" height="{Data.BAR_HEIGHT}" styleName="commandButton" click="onBulkImport()"/>
		<s:TextArea id="textInput" width="100%" height="100%"/>
	</s:VGroup>
	<fx:Script>
		<![CDATA[
			import data.Data;
			import data.InventoryItem;
			private function onFilterChange():void
			{
				const pattern:Array = filter.text.toUpperCase().split(" "); 
				Data.instance.inventoryItems.filterFunction = function(item:Object):Boolean
				{
					// AND on all words, each pattern part must match something
					for each (var patternPart:String in pattern)
					{
						if (!(Utils.matches(item.id, patternPart) || Utils.matches(item.name, patternPart) || Utils.matches(item.category, patternPart) || Utils.matches(item.price, patternPart)))
						{
							return false;
						}
					}
					return true;
				};
				Data.instance.inventoryItems.refresh();
				updateDeleteButton();
			}
			private function onDeleteItem():void
			{
				Data.instance.deleteInventoryItem(InventoryItem(items.selectedItem));
				updateDeleteButton();
			}
			private function onAddItem():void
			{
				var item:InventoryItem = Data.instance.createInventoryItem("new item", 0, "Dry Clean");
				Data.instance.writeInventoryItem(item);
				
				filter.text = "";
				onFilterChange();
				
				items.selectedItem = item;
				items.ensureCellIsVisible(items.selectedIndex);
				updateDeleteButton();
			}
			private function onItemEditted():void
			{
				var item:InventoryItem = items.selectedItem as InventoryItem;
				if (item)
				{
					Data.instance.writeInventoryItem(item);
				}
			}
			private function updateDeleteButton():void
			{
				deleteButton.enabled = items.selectedIndex >= 0;
			}
			private function onBulkImport():void
			{
				
			}
		]]>
	</fx:Script>
</s:HGroup>
