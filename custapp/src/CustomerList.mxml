<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 paddingBottom="5"
		 paddingTop="5"
		 paddingLeft="5"
		 paddingRight="5"
		 >
	<fx:Declarations></fx:Declarations>
	<s:HGroup width="100%">
		<s:Button label="ADD NEW" click="onAddCustomer()"/>
		<s:Label text="Search:" verticalAlign="middle" height="100%" paddingLeft="20"/>
		<s:TextInput id="filter" prompt="enter partial name, number or customer ID" width="100%" change="onFilterChange()"/>
	</s:HGroup>
	<s:DataGrid
		id="customerGrid"
		width="100%" height="100%" 
		sortableColumns="true" 
		dataProvider="{Data.instance.customers}"
		doubleClick="onDoubleClick()"
		doubleClickEnabled="true"
	>
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="last" headerText="Last Name"/>
				<s:GridColumn dataField="first" headerText="First Name"/>
				<s:GridColumn dataField="id" headerText="ID"/>
				<s:GridColumn dataField="phone" headerText="Phone"/>
				<s:GridColumn dataField="email" headerText="Email"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.SkinnableContainer;
			import spark.components.TitleWindow;
			
			import ui.Dialog;
			static private function matches(item:String, pattern:String):Boolean
			{
				return item && (item.toUpperCase().indexOf(pattern) >= 0);
			}
			private function onFilterChange():void
			{
				const pattern:String = filter.text.toUpperCase(); 
				Data.instance.customers.filterFunction = function(item:Object):Boolean
				{
					return matches(item.first, pattern) || 
						matches(item.last, pattern) || 
						matches(item.id, pattern) || 
						matches(item.phone, pattern) || 
						matches(item.email, pattern); 
				};
				Data.instance.customers.refresh();
			}
			private var _currentPopup:IFlexDisplayObject;
			private function showEditCustomer(addMode:Boolean):void
			{
				var edit:CustomerEditor = new CustomerEditor;
				edit.addMode = addMode;

				var popup:Dialog = new Dialog;
				popup.bodyContent = edit;
				popup.title = addMode ? "Add Customer" : "Edit Customer";

				PopUpManager.addPopUp(popup, this, true)
				PopUpManager.centerPopUp(popup);
				_currentPopup = popup;

				edit.data = addMode ? { id: Data.instance.nextID } : customerGrid.selectedItem; 

				popup.addEventListener(Event.CLOSE, onEditCustomerQuit, false, 0, true);
				popup.addEventListener(Event.COMPLETE, onEditCustomerApply, false, 0, true);
			}
			private function hideEditCustomer():void
			{
				if (_currentPopup)
				{
					PopUpManager.removePopUp(_currentPopup);
					_currentPopup = null;
				}
			}
			private function onEditCustomerQuit(e:Event):void
			{
				var source:CustomerEditor = Dialog(e.target).bodyContent as CustomerEditor;
				if (!source)
				{
					source = CustomerEditor(SkinnableContainer(e.target).getElementAt(SkinnableContainer(e.target).numElements - 1));
				}
				if (source.dirty)
				{
					Alert.show("Abandon customer changes without saving?", "Abandon changes?", Alert.YES | Alert.NO, this, onEditCustomerReallyQuit, null, Alert.NO);
				}
				else
				{
					hideEditCustomer();
				}
			}
			private function onEditCustomerReallyQuit(e:CloseEvent):void
			{
				if (e.detail == Alert.YES)
				{
					hideEditCustomer();
				}
			}
			private function onEditCustomerApply(e:Event):void
			{
				var editCustomer:CustomerEditor = CustomerEditor(Dialog(e.target).bodyContent);
				if (editCustomer.addMode)
				{
					const newCustomer:Object = editCustomer.data;
					Data.instance.customers.addItem(newCustomer);
					customerGrid.selectedItem = newCustomer;
					
					//KAI: select the customer and scroll to it - or, keep the customer record and return it
					// so the caller of this has something to do
				}
				else
				{
					Data.instance.customers[customerGrid.selectedIndex] = editCustomer.data;
				}
				Data.instance.customers.refresh();

				hideEditCustomer();
			}
			private function onAddCustomer():void
			{
				showEditCustomer(true);
			}
			private function onDoubleClick():void
			{
				showEditCustomer(false);
			}
			public function get selectedCustomer():Object
			{
				return customerGrid.selectedItem;
			}
		]]>
	</fx:Script>
</s:VGroup>
