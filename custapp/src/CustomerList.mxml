<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ui="ui.*"
		 paddingBottom="5"
		 paddingTop="5"
		 paddingLeft="5"
		 paddingRight="5"
		 creationComplete="filter.setFocus()"
		 >
	<fx:Declarations/>
	<s:HGroup width="100%">
		<s:Label text="Search:" height="100%" verticalAlign="middle"/>
		<s:TextInput id="filter" width="100%" height="100%" prompt="enter partial name, number or customer ID" change="onFilterChange()"/>
		<s:Line height="{Data.BAR_HEIGHT}">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<ui:Button label="ADD NEW" styleName="commandButton" height="100%" click="onAddCustomer()"/>
		<!--<ui:Button label="DELETE" height="100%" color="0xff0000"/>-->
	</s:HGroup>
	<s:DataGrid
		id="customerGrid"
		width="100%" height="100%" 
		sortableColumns="true" 
		dataProvider="{Data.instance.customers}"
		doubleClick="onDoubleClick()"
		doubleClickEnabled="true"
	>
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="last" headerText="Last Name"/>
				<s:GridColumn dataField="first" headerText="First Name"/>
				<s:GridColumn dataField="id" headerText="ID"/>
				<s:GridColumn dataField="phone" headerText="Phone" formatter="{Utils.phoneFormatter}"/>
				<s:GridColumn dataField="email" headerText="Email"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<fx:Script>
		<![CDATA[
			import data.Data;
			
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.SkinnableContainer;
			import spark.components.TitleWindow;
			
			import ui.Dialog;
			import ui.DialogEvent;
			private function onFilterChange():void
			{
				const pattern:Array = filter.text.toUpperCase().split(" "); 
				Data.instance.customers.filterFunction = function(customer:Object):Boolean
				{
					// AND on all words, each pattern part must match something
					for each (var patternPart:String in pattern)
					{
						if (!Utils.customerMatchesPattern(customer, patternPart))
						{
							return false;
						}
					}
					return true;
				};
				Data.instance.customers.refresh();
			}
			static private const BTN_ADD_CUSTOMER:String = "Add Customer";
			static private const BTN_SAVE_CUSTOMER:String = "Save Customer";
			private var _currentPopup:Dialog;
			private function showCustomerEditor(addMode:Boolean):void
			{
				var edit:CustomerEditor = new CustomerEditor;
				edit.addMode = addMode;
				
				var popup:Dialog = new Dialog;
				popup.bodyContent = edit;

				PopUpManager.addPopUp(popup, this, true)
				PopUpManager.centerPopUp(popup);
				_currentPopup = popup;

				if (addMode)
				{
					popup.title = "Add New Customer";
					popup.addButton(BTN_ADD_CUSTOMER);
					edit.customer = { id: Data.instance.nextID, phone: (filter.text || undefined) };
				}
				else
				{
					popup.title = "Edit Customer";
					popup.addButton(BTN_SAVE_CUSTOMER);
					edit.customer = customerGrid.selectedItem;
				}
				popup.addButton(Dialog.BTN_CANCEL);
				popup.addEventListener(Event.COMPLETE, onCustomerEditorButton, false, 0, true);
			}
			private function hideCustomerEditor():void
			{
				if (_currentPopup)
				{
					PopUpManager.removePopUp(_currentPopup);
					_currentPopup = null;
				}
			}
			private function onCustomerEditorButton(e:DialogEvent):void
			{
				if (e.result == BTN_SAVE_CUSTOMER || e.result == BTN_ADD_CUSTOMER)
				{
					save();
					hideCustomerEditor();
				}
				else
				{
					const source:CustomerEditor = CustomerEditor(Dialog(e.target).bodyContent);
					if (source.dirty)
					{
						Dialog.alert(this, "This customer has changed.  Save changes?", "Customer has changed", Dialog.STANDARD_SAVE_BTNS, onCustomerEditorClosingPrompt); 
					}
					else
					{
						hideCustomerEditor();
					}
				}
			}
			private function onCustomerEditorClosingPrompt(e:DialogEvent):void
			{
				switch(e.result) {
				case Dialog.BTN_SAVE:
					save();
					hideCustomerEditor();
					break;
				case Dialog.BTN_DONT_SAVE:
					hideCustomerEditor();
					break;
				case Dialog.BTN_CANCEL:
					// nothing, prompt dialog auto-hides
					break;
				}
			}
			private function save():void
			{
				const edit:CustomerEditor = CustomerEditor(_currentPopup.bodyContent)
				const newCustomer:Object = edit.customer;
				
				Data.instance.writeCustomer(newCustomer);
				if (edit.addMode)
				{
					customerGrid.selectedItem = newCustomer;
					customerGrid.ensureCellIsVisible(customerGrid.selectedIndex);
					
					dispatchEvent(new Event(Event.COMPLETE));
				}
				Data.instance.customers.refresh();
			}
			private function onAddCustomer():void
			{
				showCustomerEditor(true);

				filter.text = "";
				onFilterChange();
			}
			private var _doubleClickEdits:Boolean = true;
			private function onDoubleClick():void
			{
				if (_doubleClickEdits)
				{
					showCustomerEditor(false);
				}
				else
				{
					dispatchEvent(new Event(Event.COMPLETE));
				}
			}
			public function get selectedCustomer():Object
			{
				return customerGrid.selectedItem;
			}
			public function set doubleClickEdits(b:Boolean):void
			{
				_doubleClickEdits = b;
			}
		]]>
	</fx:Script>
</s:VGroup>
