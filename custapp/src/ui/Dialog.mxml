<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ui="ui.*"
			   close="dispatchEvent(new DialogEvent(Dialog.BTN_CANCEL)); doAutoClose()"
			   >
	<fx:Declarations>
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout paddingBottom="10"/>
	</s:layout>
	<s:Line width="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
	<s:HGroup id="buttonParent" width="100%" horizontalAlign="center">
	</s:HGroup>
	<fx:Script>
		<![CDATA[
			import data.Data;
			
			import mx.core.IVisualElement;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Label;

			//
			// Some buttons you can use to do common things.  BTN_DONE is returned if the content
			// dispatches a Event.COMPLETE.  BTN_CANCEL is returned if the dialog is ESC'ed or X button'ed.
			static public const BTN_DONE:String = "Done";
			static public const BTN_CANCEL:String = "Cancel";
			static public const BTN_SAVE:String = "Save";
			static public const BTN_DONT_SAVE:String = "Don't Save";
			static public const BTN_YES:String = "Yes";
			static public const BTN_NO:String = "No";
			static public const STANDARD_SAVE_BTNS:Array = [BTN_SAVE, BTN_DONT_SAVE, BTN_CANCEL];
			
			//
			// Pass in null for the button labels to hide either of them, or null for the callback if you don't
			// need it
			static public function alert(parent:DisplayObject, caption:String, title:String, buttons:Array = null, callback:Function = null):void
			{
				var label:Label = new Label;
				label.text = caption;
				label.setStyle("paddingLeft", 20);
				label.setStyle("paddingRight", 20);
				label.setStyle("paddingTop", 20);
				label.setStyle("paddingBottom", 20);
				
				var popup:Dialog = new Dialog;
				popup.autoClose = true;
				popup.bodyContent = label;
				popup.title = title;
				if (callback != null)
				{
					popup.addEventListener(Event.COMPLETE, callback, false, 0, true);
				}
				for each (var button:String in buttons)
				{
					popup.addButton(button);
				}
				
				PopUpManager.addPopUp(popup, parent, true);
				PopUpManager.centerPopUp(popup);
			}
			private var _buttonLabels:Vector.<String>;
			protected override function createChildren():void
			{
				super.createChildren();
				if (_buttonLabels)
				{
					for each (var label:String in _buttonLabels)
					{
						renderButton(label);
					}
					_buttonLabels = null;
				}
			}
			public function addButton(label:String):void
			{
				if (buttonParent)
				{
					renderButton(label)
				}
				else
				{
					_buttonLabels.push(label);
				}
			}
			private function renderButton(label:String):void
			{
				const button:Button = new ui.Button;
				button.label = label;
				button.height = Data.BAR_HEIGHT;
				button.addEventListener(MouseEvent.CLICK, onButton, false, 0, true);
				
				buttonParent.addElement(button);
			}
			private function onButton(e:Event):void
			{
				const targ:Button = Button(e.currentTarget);
				dispatchEvent(new DialogEvent(targ.label));
				
				doAutoClose();
			}
			public function set bodyContent(content:IVisualElement):void
			{
				content.addEventListener(Event.COMPLETE, bounceComplete, false, 0, true);

				addElementAt(content, 0);
			}
			public function get bodyContent():IVisualElement
			{
				return getElementAt(0);
			}
			private function bounceComplete(e:Event):void
			{
				dispatchEvent(new DialogEvent(Dialog.BTN_DONE));
			}
			
			private var _autoClose:Boolean = false;
			public function set autoClose(b:Boolean):void
			{
				_autoClose = b;
			}
			private function doAutoClose():void
			{
				if (_autoClose)
				{
					PopUpManager.removePopUp(this);
				}
			}
		]]>
	</fx:Script>
</s:TitleWindow>
