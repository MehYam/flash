<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="onInit()" xmlns:local="*"
		 paddingBottom="5"
		 paddingTop="5"
		 paddingLeft="5"
		 paddingRight="5">
	<fx:Declarations>
		<s:CurrencyFormatter id="formatter" useCurrencySymbol="true"/>
	</fx:Declarations>
	<s:HGroup>
		<s:TextInput id="customer" width="300" fontWeight="bold" editable="false" selectable="false" prompt="Select a customer" click="onSelectCustomer()"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:Label text="Pickup Date:" height="100%" verticalAlign="middle"/>
		<mx:DateField id="date" width="160" labelFunction="dateFormatter"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:Label text="Pickup Time:" height="100%" verticalAlign="middle"/>
		<s:DropDownList id="time" selectedIndex="4">
			<s:dataProvider>
				<mx:ArrayList>
					<fx:String>9am</fx:String>
					<fx:String>10am</fx:String>
					<fx:String>11am</fx:String>
					<fx:String>12pm</fx:String>
					<fx:String>1pm</fx:String>
					<fx:String>2pm</fx:String>
					<fx:String>3pm</fx:String>
					<fx:String>4pm</fx:String>
					<fx:String>5pm</fx:String>
					<fx:String>6pm</fx:String>
				</mx:ArrayList>
			</s:dataProvider>
		</s:DropDownList>
	</s:HGroup>
	<s:Line width="100%">
		<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
	</s:Line>
	<s:HGroup>
		<s:Label text="Items:"/>
		<s:Label id="items" text="0" fontWeight="bold"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:Label text="Total:"/>
		<s:Label id="total" text="0" fontWeight="bold"/>
	</s:HGroup>
	<s:HGroup>
		<s:VGroup id="commandButtons" gap="1"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:TileGroup id="itemButtons" horizontalGap="1" verticalGap="1"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:TileGroup id="colorButtons" horizontalGap="1" verticalGap="1"/>
	</s:HGroup>
	<s:Line width="100%">
		<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
	</s:Line>
	<local:OrderItemList id="order" width="100%" height="100%"/>
	<fx:Script>
		<![CDATA[
			import flash.text.engine.FontWeight;
			
			import mx.binding.utils.BindingUtils;
			import mx.containers.TitleWindow;
			import mx.core.IFlexDisplayObject;
			import mx.core.IUIComponent;
			import mx.managers.PopUpManager;
			
			import spark.components.Button;
			
			import ui.Dialog;
			import ui.MultilineButtonSkin;
			
			private var _clearItemButton:IUIComponent;
			private var _commandButtonInfo:Array =
			[
				{ name: "NEW", color: 0x00ff00, handler: onClearAll },
				{ name: "PRINT TAG", color: 0x0000ff, handler: onPrintTag },
				{ name: "PRINT RECEIPT", color: 0x0000ff, handler: onPrintReceipt },
				{ name: "CLEAR ITEM", color: 0xff0000, handler: onClearItem }
			];
			private function onInit():void
			{
				// Command buttons ///////////////////////////////////////////////
				// KAI: why not just do this as mxml?
				// KAI: doesn't this belong in createChildren?
				for each (var cmd:Object in _commandButtonInfo)
				{
					var cmdButton:Button = new Button;
					cmdButton.width = 125;
					cmdButton.height = 50;
					cmdButton.setStyle("color", cmd.color);
					cmdButton.setStyle("fontWeight", FontWeight.BOLD);
					cmdButton.label = cmd.name;

					if (cmd.handler)
					{
						cmdButton.addEventListener(MouseEvent.CLICK, cmd.handler, false, 0, true);
					}
					if (cmd.handler == onClearItem)
					{
						_clearItemButton = cmdButton
					}
					commandButtons.addElement(cmdButton);
				}
				
				// Item buttons ////////////////////////////////////////////////
				for each (var item:Object in Data.instance.items)
				{
					var button:Button = new Button;
					button.setStyle("skinClass", MultilineButtonSkin);
					button.label = item.name + "\n" + formatter.format(item.price);
					button.height = 100;
					button.width = 100;
					button.name = item.id;
					button.addEventListener(MouseEvent.CLICK, onItem, false, 0, true);

					itemButtons.addElement(button);
				}
				
				BindingUtils.bindSetter(onSelectionUpdate, order.grid, "selectedIndex");
				
				// Colors and properties //////////////////////////////////
				for each (var color:Object in Data.instance.colors.source)
				{
					var colorButton:Button = new Button;
					colorButton.setStyle("color", color.color);
					colorButton.setStyle("fontWeight", FontWeight.BOLD);
					colorButton.label = color.name;
					colorButton.height = 50;
					colorButton.width = 100;
					colorButton.name = color.name;
					colorButton.addEventListener(MouseEvent.CLICK, onColorProperty, false, 0, true);
					
					colorButtons.addElement(colorButton);
				}
				for each (var pattern:String in Data.instance.patterns.source)
				{
					var patternButton:Button = new Button;
					patternButton.setStyle("fontSize", 12);
					patternButton.label = pattern;
					patternButton.height = 50;
					patternButton.width = 100;
					patternButton.name = pattern;
					patternButton.addEventListener(MouseEvent.CLICK, onColorProperty, false, 0, true);
					
					colorButtons.addElement(patternButton);
				}
				date.selectedDate = new Date;
			}
			private function onSave(e:Event):void
			{
				
			}
			private function onPrintTag(e:Event):void
			{
				
			}
			private function onPrintReceipt(e:Event):void
			{
				
			}
			private function onClearAll(e:Event):void
			{
				
			}
			private function onSelectionUpdate(foo:int):void
			{
				_clearItemButton.enabled = colorButtons.enabled = foo >= 0;
			}
			private function onItem(e:Event):void
			{
				for each (var item:Object in Data.instance.items.source)
				{
					if (item.id == parseInt(e.target.name))
					{
						order.addItem(item);
						updateTotal();
						break;
					}
				}
			}
			private function onClearItem(e:Event):void
			{
				order.removeItem(order.selectedIndex);
				order.grid.selectedIndex = order.grid.dataProvider.length - 1;
				
				updateTotal();
				
				// shouldn't have to do this because we're binding to the selectedIndex property,
				// but for some reason that property doesn't fire when it gets set to -1
				if (!order.numItems)
				{
					onSelectionUpdate(-1);
				}
			}
			private function onColorProperty(e:Event):void
			{
				const color:String = IFlexDisplayObject(e.target).name;
				order.addProperty(color);
			}
			private function updateTotal():void
			{
				items.text = String(order.numItems);
				total.text = formatter.format(order.total);
			}

			private var _customerList:CustomerList = new CustomerList;
			private var _currentPopup:IFlexDisplayObject;
			private function onSelectCustomer():void
			{
				var popup:Dialog = new Dialog;
				popup.title = "Choose Customer";
				popup.width = 700;
				popup.height = 500;
				_customerList.percentHeight = 100;
				_customerList.percentWidth = 100;
				popup.bodyContent = _customerList;
				
				
				PopUpManager.addPopUp(popup, this, true);
				PopUpManager.centerPopUp(popup);
				_currentPopup = popup;

				popup.addEventListener(Event.CLOSE, onCustomerChosen, false, 0, true);
				popup.addEventListener(Event.COMPLETE, onCustomerChosen, false, 0, true);
			}
			private var _currentCustomer:Object;
			private function onCustomerChosen(e:Event):void
			{
				if (e.type == Event.COMPLETE)
				{
					const customerObj:Object = _customerList.selectedCustomer;
					if (customerObj)
					{
						customer.text = customerObj.last + " " + customerObj.first + " " + customerObj.phone;
						_currentCustomer = customerObj;
					}
				}
				PopUpManager.removePopUp(_currentPopup);
				_currentPopup = null;
			}
			private function reset():void
			{
				_currentCustomer = null;
				customer.text = null;
				date.showToday = true;
				
			}
			private function dateFormatter(date:Date):String
			{
				return date ? date.toDateString() : "--";
			}
		]]>
	</fx:Script>
</s:VGroup>
