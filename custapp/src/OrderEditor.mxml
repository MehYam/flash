<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:local="*"
		 paddingBottom="5"
		 paddingTop="5"
		 paddingLeft="5"
		 paddingRight="5"
		 creationComplete="onInit()" 
		 >
	<fx:Declarations>
		<fx:Boolean id="asPopup"></fx:Boolean>
	</fx:Declarations>
	<s:HGroup>
		<s:TextInput id="customer" width="300" height="100%" fontWeight="bold" editable="false" selectable="false" prompt="Select a customer" click="onSelectCustomer()"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:Label text="Pickup Date:" height="100%" verticalAlign="middle"/>
		<mx:DateField id="date" width="160" scaleX="2" scaleY="2"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:Label text="Pickup Time:" height="100%" verticalAlign="middle"/>
		<s:DropDownList id="time" dataProvider="{timeValues}" selectedIndex="4" height="100%"/>
	</s:HGroup>
	<s:Line width="100%">
		<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
	</s:Line>
	<s:HGroup>
		<s:VGroup id="commandButtons" gap="1"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:VGroup gap="0">
			<s:TabBar height="50" fontWeight="bold">
				<mx:ArrayCollection>
					<fx:String>Dry Clean</fx:String> 
					<fx:String>Laundry</fx:String> 
					<fx:String>Alteration</fx:String> 
				</mx:ArrayCollection>
			</s:TabBar>
			<s:TileGroup id="itemButtons" horizontalGap="1" verticalGap="1"/>
		</s:VGroup>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:TileGroup id="colorButtons" horizontalGap="1" verticalGap="1"/>
	</s:HGroup>
	<s:Line width="100%">
		<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
	</s:Line>
	<s:HGroup>
		<s:Label text="Ticket:"/>
		<s:Label id="orderID" styleName="numberLabel"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:Label text="Items:"/>
		<s:Label id="items" text="0" styleName="numberLabel"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:Label text="Total:"/>
		<s:Label id="total" text="0" styleName="numberLabel"/>
		<s:Line height="100%">
			<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
		</s:Line>
		<s:Label text="Paid:"/>
		<s:Label id="paid" text="0" styleName="numberLabel" color="#00ff00"/>
	</s:HGroup>
	<s:Line width="100%">
		<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
	</s:Line>
	<local:OrderItemList id="itemList" width="100%" height="100%"/>
	<s:Line width="100%">
		<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
	</s:Line>
	<local:OrderHistoryList id="historyList" width="100%" height="40%"/>
	<fx:Script>
		<![CDATA[
			import data.Data;
			import data.Order;
			
			import flash.text.engine.FontWeight;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayList;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.core.IUIComponent;
			import mx.managers.PopUpManager;
			
			import spark.components.Button;
			
			import ui.Dialog;
			import ui.MultilineButtonSkin;

			static private const timeValues:ArrayList = new ArrayList(
				[
					{ label: "9am", value: 9 },
					{ label: "10am", value: 10 },
					{ label: "11am", value: 11 },
					{ label: "12pm", value: 12 },
					{ label: "1pm", value: 13 },
					{ label: "2pm", value: 14 },
					{ label: "3pm", value: 15 },
					{ label: "4pm", value: 16 },
					{ label: "5pm", value: 17 },
					{ label: "6pm", value: 18 },
					{ label: "7pm", value: 19 }
				]
			);
			private var _quantityButtons:Vector.<IUIComponent> = new Vector.<IUIComponent>(2);
			private var _commandButtonInfo:Array =
			[
				{ name: "-PAY-", color: 0x0000cc, handler: onPay },
				{ name: "PRINT TAG", color: 0x0000ff, handler: onPrintTag },
				{ name: "PRINT RCPT", color: 0x0000ff, handler: onPrintReceipt },
				{ name: "ITEM + 1", color: 0x00aa00, handler: onIncItem },
				{ name: "ITEM - 1", color: 0xbb0000, handler: onDecItem },
				{ name: "NEW", color: 0x00aa00, handler: onSave, mainFrameOnly: true }
			];
			private function onInit():void
			{
				// Command buttons ///////////////////////////////////////////////
				// KAI: why not just do this as mxml?
				// KAI: doesn't this belong in createChildren?
				for each (var cmd:Object in _commandButtonInfo)
				{
					if (asPopup && cmd.mainFrameOnly)
					{
						continue;
					}
					var cmdButton:Button = new Button;
					cmdButton.width = 125;
					cmdButton.height = 50;
					cmdButton.setStyle("color", cmd.color);
					cmdButton.setStyle("fontWeight", FontWeight.BOLD);
					cmdButton.label = cmd.name;

					if (cmd.handler)
					{
						cmdButton.addEventListener(MouseEvent.CLICK, cmd.handler, false, 0, true);
						if (cmd.handler == onDecItem)
						{
							_quantityButtons[0] = cmdButton;
						}
						else if (cmd.handler == onIncItem)
						{
							_quantityButtons[1] = cmdButton;
						}
					}
					commandButtons.addElement(cmdButton);
				}
				
				// Item buttons ////////////////////////////////////////////////
				for each (var item:Object in Data.instance.items)
				{
					var button:Button = new Button;
					button.setStyle("skinClass", MultilineButtonSkin);
					button.label = item.name + "\n" + Utils.currencyFormatter.format(item.price);
					button.height = 100;
					button.width = 100;
					button.name = item.id;
					button.addEventListener(MouseEvent.CLICK, onItem, false, 0, true);

					itemButtons.addElement(button);
				}
				
				BindingUtils.bindSetter(onSelectionUpdate, itemList.grid, "selectedIndex");
				
				// Colors and properties //////////////////////////////////
				for each (var color:Object in Data.instance.colors.source)
				{
					var colorButton:Button = new Button;
					colorButton.setStyle("color", color.color);
					colorButton.setStyle("fontWeight", FontWeight.BOLD);
					colorButton.label = color.name;
					colorButton.height = 50;
					colorButton.width = 100;
					colorButton.name = color.name;
					colorButton.addEventListener(MouseEvent.CLICK, onColorProperty, false, 0, true);
					
					colorButtons.addElement(colorButton);
				}
				for each (var pattern:String in Data.instance.patterns.source)
				{
					var patternButton:Button = new Button;
					patternButton.setStyle("fontSize", 12);
					patternButton.label = pattern;
					patternButton.height = 50;
					patternButton.width = 100;
					patternButton.name = pattern;
					patternButton.addEventListener(MouseEvent.CLICK, onColorProperty, false, 0, true);
					
					colorButtons.addElement(patternButton);
				}
				date.selectedDate = new Date;

				if (!_order)
				{
					newOrder();
				}
			} 
			private function newOrder():void
			{
				var pickupTime:Date = new Date();
				pickupTime.time += Utils.daysToTime(2);
				pickupTime.hours = 12;

				order = Data.instance.createOrder(0, pickupTime.time);
			}
			private function onSave(e:Event):void
			{
				if (!_order.customerID)
				{
					Alert.show("Choose customer before saving", "Customer Missing");
				}
				else
				{
					Data.instance.writeOrder(order);
					newOrder();					
				}
			}
			private function onPay(e:Event):void
			{
				var pay:PayUI = new PayUI;
				pay.total = _order.total;
				pay.owing = _order.total - _order.paid;
					
				var popup:Dialog = new Dialog;
				popup.bodyContent = pay;
				popup.autoClose = true;
				popup.title = "Pay";
				popup.completeLabel = "PAY";
				
				var dobj:DisplayObject = DisplayObject(e.currentTarget);
				var dest:Point = globalToLocal(dobj.localToGlobal(new Point(dobj.x + dobj.width, dobj.y + dobj.height)));
				
				popup.x = dest.x;
				popup.y = dest.y;
				
				PopUpManager.addPopUp(popup, this, true);
				popup.addEventListener(Event.COMPLETE, onPayComplete, false, 0, true);
			}
			private function onPayComplete(e:Event):void
			{
				const pay:PayUI = PayUI(Dialog(e.currentTarget).bodyContent);
				const change:Number = pay.paying - pay.owing; 

				_order.paid = Math.min(_order.total, _order.paid + pay.paying);
				
				updateTotal();

				if (change > 0)
				{
					Alert.show("Change of " + Utils.currencyFormatter.format(change) + " goes to customer.", "Change");
				}
				Data.instance.writeOrderHistory(_order, "Paid " + _order.paid + " of " + _order.total);
				Data.instance.writeOrder(_order);
			}
			private function onPrintTag(e:Event):void
			{
				var label:Label = new Label;
				label.height = 100;
				label.setStyle("verticalAlign", "middle");
				
				const msg:String = "---Printing tag " + _order.id + " for " + customer.text + "---";
				label.text = msg;

				Data.instance.writeOrderHistory(_order, msg);
				Data.instance.writeOrder(_order);

				var popup:Dialog = new Dialog;
				popup.bodyContent = label;
				popup.autoClose = true;
				
				PopUpManager.addPopUp(popup, this);
				PopUpManager.centerPopUp(popup);
			}
			private function onPrintReceipt(e:Event):void
			{
				var label:Label = new Label;
				label.height = 100;
				label.setStyle("verticalAlign", "middle");

				const msg:String = "---Printing receipt " + _order.id + " for " + customer.text + " " + total.text + "---";
				label.text = msg;

				Data.instance.writeOrderHistory(_order, msg);
				Data.instance.writeOrder(_order);

				var popup:Dialog = new Dialog;
				popup.bodyContent = label;
				popup.autoClose = true;
				
				PopUpManager.addPopUp(popup, this);
				PopUpManager.centerPopUp(popup);
			}
			private function onSelectionUpdate(foo:int):void
			{
				_quantityButtons[0].enabled = _quantityButtons[1].enabled = colorButtons.enabled = foo >= 0;
			}
			private function onItem(e:Event):void
			{
				const rawItem:Object = Data.instance.getRawItem(parseInt(e.target.name));
				if (rawItem)
				{
					_order.addLineItem(rawItem.id);

					itemList.selectedIndex = _order.items.length - 1;
					updateTotal();
				}
			}
			private function onIncItem(e:Event):void
			{
				_order.incItem(itemList.selectedIndex);
				updateTotal();
			}
			private function onDecItem(e:Event):void
			{
				_order.decItem(itemList.selectedIndex);
				updateTotal();
				
				onSelectionUpdate(itemList.selectedIndex);
			}
			private function onColorProperty(e:Event):void
			{
				if (itemList.selectedIndex >= 0)
				{
					const color:String = IFlexDisplayObject(e.target).name;
					_order.addProperty(itemList.selectedIndex, color);
				}
			}
			private function updateTotal():void
			{
				items.text = String(_order.items.length);
				total.text = Utils.currencyFormatter.format(_order.total);
				paid.text = Utils.currencyFormatter.format(_order.paid);
				
				paid.setStyle("color", order.total == _order.paid ? 0x00ee00 : 0xff0000);
			}

			private var _customerList:CustomerList = new CustomerList;
			private var _currentPopup:IFlexDisplayObject;
			private function onSelectCustomer():void
			{
				var popup:Dialog = new Dialog;
				popup.title = "Choose Customer";
				popup.width = 700;
				popup.height = 500;
				_customerList.doubleClickEdits = false;
				_customerList.percentHeight = 100;
				_customerList.percentWidth = 100;
				popup.bodyContent = _customerList;

				PopUpManager.addPopUp(popup, this, true);
				PopUpManager.centerPopUp(popup);
				_currentPopup = popup;

				popup.addEventListener(Event.CLOSE, onCustomerChosen, false, 0, true);
				popup.addEventListener(Event.COMPLETE, onCustomerChosen, false, 0, true);
			}
			static private function formatCustomer(customerObj:Object):String
			{
				return customerObj.last + ", " + customerObj.first + " " + Utils.phoneFormatter.format(customerObj.phone);
			}
			private function onCustomerChosen(e:Event):void
			{
				if (e.type == Event.COMPLETE)
				{
					const customerObj:Object = _customerList.selectedCustomer;
					if (customerObj)
					{
						customer.text = formatCustomer(customerObj);
						_order.customerID = customerObj.id;
					}
				}
				PopUpManager.removePopUp(_currentPopup);
				_currentPopup = null;
			}
			private function dateFormatter(date:Date):String
			{
				return date ? date.toDateString() : "";
			}
			
			private var _order:Order;
			public function set order(o:Order):void
			{
				_order = o;
				Data.instance.loadOrderHistory(_order);

				orderID.text = String(o.id);
				customer.text = o.customerID ? formatCustomer(Data.instance.getCustomer(o.customerID)) : null;
				
				var d:Date = new Date();
				d.time = o.pickupTime;
				date.selectedDate = d;

				const min:int = timeValues.getItemAt(0).value;
				const max:int = timeValues.getItemAt(timeValues.length-1).value;
				const hour:int = Math.min(Math.max(min, d.hours), max);
				time.selectedIndex = hour - min;
				
				itemList.items = o.items;
				
				updateTotal();
				
				historyList.history = order.history;
			}
			public function get order():Order
			{
				Data.instance.writeOrderHistory(order, "order saved");

				//KAI: better binding could get rid of this
				_order.pickupTime = date.selectedDate.setHours(time.selectedItem.value);
				return _order;
			}
		]]>
	</fx:Script>
</s:VGroup>
