<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:local="*"
		 paddingBottom="5"
		 paddingTop="5"
		 paddingLeft="5"
		 paddingRight="5"
		 creationComplete="onInit()" currentState="needCustomer" xmlns:ui="ui.*"
		 >
	
	<fx:Declarations>
		<fx:Boolean id="asPopup"></fx:Boolean>
	</fx:Declarations>
	<s:states>
		<s:State name="needCustomer"/>
		<s:State name="needItems"/>
		<s:State name="printReady"/>
	</s:states>
	<s:HGroup width="100%">
		<s:TextInput id="customer" width="300" height="100%" fontWeight="bold" editable="false" selectable="false" prompt="Click to select customer" click="onSelectCustomer()"/>
		<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
		<s:Label text="Pickup Date:" height="100%" verticalAlign="middle"/>
		<mx:DateField id="date" width="160" scaleX="2" scaleY="2" change="onTimeChange()"/>
		<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
		<s:Label text="Pickup Time:" height="100%" verticalAlign="middle"/>
		<s:DropDownList id="time" dataProvider="{timeValues}" selectedIndex="4" height="100%" change="onTimeChange()"/>
<!--		<s:HGroup width="100%" horizontalAlign="right">
			<s:Button id="fullscreen" width="50" height="50" toolTip="Maximize Window" icon="@Embed(source='ui/fullscreenButton.png')" click="onFullScreen(event)"/>
			<s:Button id="close" width="50" height="50" toolTip="Exit the application" icon="@Embed(source='ui/closeButton.png')" click="onExit(event)"/>			
		</s:HGroup>
-->	</s:HGroup>
	<s:Line width="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
	<s:HGroup width="100%">
		<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
		<s:VGroup gap="0" width="100%">
			<s:TabBar height="50" width="100%" color="0x0000bb" fontWeight="bold" dataProvider="{stack}"/>
			<mx:ViewStack id="stack" width="100%"/>
		</s:VGroup>
		<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
		<s:TileGroup id="colorButtons" horizontalGap="1" verticalGap="1"/>
	</s:HGroup>
	<s:Line width="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
	<s:HGroup width="100%" height="100%">
		<local:OrderItemList id="itemList" width="100%" height="100%" change="onItemEditted(event)"/>
		<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
		<s:VGroup id="commandButtons2" gap="1">
			<s:Button id="incItem" label="+1 COUNT" color="0x00aa00" styleName="commandButton" width="125" height="50" click="onIncItem()"/>
			<s:Button id="decItem" label="-1 COUNT" color="0xbb0000" styleName="commandButton" width="125" height="50" click="onDecItem()"/>
		</s:VGroup>
	</s:HGroup>
	<s:Line width="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
	<s:HGroup width="100%">
		<s:HGroup horizontalAlign="left" width="100%">
			<s:Label text="Ticket:"/>
			<s:Label id="orderID" styleName="numberLabel" color="#FDC880"/>
			<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
			<s:Label text="Status:"/>
			<s:Label id="statusLabel" text="draft" color="#FFFF00"/>
			<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>			
		</s:HGroup>
		<s:HGroup horizontalAlign="right" width="100%">
			<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
			<s:Label text="Items:"/>
			<s:Label id="items" text="0" styleName="numberLabel"/>
			<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
			<s:Label text="Total:"/>
			<s:Label id="total" text="0" styleName="numberLabel"/>
			<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
			<s:Label text="Paid:"/>
			<s:Label id="paid" text="0" styleName="numberLabel" color="#00ff00"/>			
		</s:HGroup>
	</s:HGroup>
	<s:Line width="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
	<s:HGroup width="100%" height="120">
		<local:OrderHistoryList id="historyList" width="100%" height="100%"/>
		<s:Button label="NEW" enabled="{!asPopup}" height="100%" width="180" chromeColor="#B7DCFF" click="onNew()" 
				  icon="@Embed(source='ui/newDoc.png')" iconPlacement="right"/>			
		<s:Button id="printTag" width="300" height="100%" iconPlacement="right"
				  icon.needCustomer="@Embed(source='ui/customer.png')" icon.printReady="@Embed(source='ui/printer.png')" icon.needItems="@Embed(source='ui/printer.png')" 
				  chromeColor.printReady="#4CAE46" chromeColor.needCustomer="#7B9221" chromeColor.needItems="#C0C0C0"
				  label.printReady="Print Ticket" label.needCustomer="Select Customer" label.needItems="Select Items" 
				  enabled.printReady="true" enabled.needCustomer="true" enabled.needItems="false" 
				  click.printReady="onPrintTag()" click.needCustomer="onSelectCustomer()"/>
	</s:HGroup>
	<fx:Script>
		<![CDATA[
			import data.Data;
			import data.InventoryItem;
			import data.Order;
			
			import flash.text.engine.FontWeight;
			
			import karnold.spark.FlowLayout;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.core.IUIComponent;
			import mx.core.IVisualElementContainer;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Application;
			import spark.components.Button;
			import spark.components.Group;
			import spark.components.NavigatorContent;
			import spark.events.IndexChangeEvent;
			import spark.layouts.ColumnAlign;
			import spark.layouts.TileLayout;
			
			import ui.Dialog;
			import ui.DialogEvent;
			import ui.MultilineButtonSkin;

			static private const timeValues:ArrayList = new ArrayList(
				[
					{ label: "9am", value: 9 },
					{ label: "10am", value: 10 },
					{ label: "11am", value: 11 },
					{ label: "12pm", value: 12 },
					{ label: "1pm", value: 13 },
					{ label: "2pm", value: 14 },
					{ label: "3pm", value: 15 },
					{ label: "4pm", value: 16 },
					{ label: "5pm", value: 17 },
					{ label: "6pm", value: 18 },
					{ label: "7pm", value: 19 }
				]
			);
			private const _newButton:Object =
				{ name: "NEW", color: 0x00aa00, handler: onNew };
			private const _closeButton:Object =
				{ name: "CLOSE", color: 0xbb0000, handler: onClose };
			
			private function onInit():void
			{
				if (!_order)
				{
					if (!Data.instance.ordersHaveLoaded)
					{
						Data.instance.events.addEventListener(Data.EVENT_ORDERS_LOADED, onOrdersLoaded, false, 0, true);
					}
					else
					{
						onOrdersLoaded();
					}
				}
				Data.instance.events.addEventListener(Data.EVENT_INVENTORY_LOADED, onInventoryItemsChanged, false, 0, true);
				if (Data.instance.inventoryHasLoaded)
				{
					onInventoryItemsChanged();
				}
				invalidateSize();
				invalidateDisplayList();
				
			}
			protected override function createChildren():void
			{
				super.createChildren();

				// Colors and properties //////////////////////////////////
				for each (var color:Object in Data.instance.colors.source)
				{
					var colorButton:Button = new Button;
					colorButton.setStyle("chromeColor", color.color);
					if (color.color == 0)
					{
						colorButton.setStyle("color", 0xffffff);
					}
					colorButton.setStyle("fontWeight", FontWeight.BOLD);
					colorButton.label = color.name;
					colorButton.height = 50;
					colorButton.width = 100;
					colorButton.name = color.name;
					colorButton.addEventListener(MouseEvent.CLICK, onColorProperty, false, 0, true);
					
					colorButtons.addElement(colorButton);
				}
				for each (var pattern:String in Data.instance.patterns.source)
				{
					var patternButton:Button = new Button;
					patternButton.setStyle("fontSize", 12);
					patternButton.label = pattern;
					patternButton.height = 50;
					patternButton.width = 100;
					patternButton.name = pattern;
					patternButton.addEventListener(MouseEvent.CLICK, onColorProperty, false, 0, true);
					
					colorButtons.addElement(patternButton);
				}
				date.selectedDate = new Date;

				// Command buttons ///////////////////////////////////////////////
				BindingUtils.bindSetter(onSelectionUpdate, itemList.grid, "selectedIndex");
			}
			private function onInventoryItemsChanged(e:Event = null):void
			{
				stack.removeAllElements();
				for each (var cat:String in Data.instance.inventoryItemCats.source)
				{
					const itemsForThisCategory:Array = Data.instance.inventoryItems.source.filter(
						function(thisItem:InventoryItem, index:int, arr:Array):Boolean
						{
							return thisItem.category == cat;
						}
					);
					var tabsForThisCategory:uint = 0;
					var nav:NavigatorContent = null;
					var itemButtons:Group = null;
					for each (var item:InventoryItem in itemsForThisCategory)
					{
						if (!nav)
						{
							// create the next tab
							nav = new NavigatorContent;
							nav.percentHeight = 100;
							nav.label = cat + " " + ++tabsForThisCategory;

							var layout:FlowLayout = new FlowLayout;
							layout.horizontalGap = 1;
							layout.verticalGap = 1;
							layout.justify = true;

							var group:Group = new Group;
							group.layout = layout;

							group.percentWidth = 100;
							group.percentHeight = 100;
							itemButtons = group;

							nav.addElement(itemButtons);
							stack.addElement(nav);
						}
						var button:Button = new Button;
						button.setStyle("skinClass", MultilineButtonSkin);
						button.label = item.name + "\n" + Utils.currencyFormatter.format(item.price);
						button.height = 100;
						button.width = 120;
						button.setStyle("fontSize",16); 
						button.name = String(item.id);
						if( item.name == "blouse")
						{							
							button.setStyle("icon", AssetManager.ICON);
							button.setStyle("iconPlacement", "top");
						
						}
						else if( item.name == "coat (M)" )
						{
							button.setStyle("icon", AssetManager.ICON2);
							button.setStyle("iconPlacement", "top");
						}
						else if( item.name == "suit, 2pc" )
						{
							button.setStyle("icon", AssetManager.ICON3);
							button.setStyle("iconPlacement", "top");
						}
						button.addEventListener(MouseEvent.CLICK, onItem, false, 0, true);

						itemButtons.addElement(button);
						
						if (itemButtons.numElements >= Data.settings.data.maxTabItems)
						{
							// need to overflow to a new tab, end this one
							nav = null;
							itemButtons = null;
						}
					}
				}
							}
			private function onOrdersLoaded(e:Event = null):void
			{
				newOrder();
			}
			private function newOrder():void
			{
				var pickupTime:Date = new Date();
				pickupTime.time += Utils.daysToTime(2);
				pickupTime.hours = 12;

				order = Data.instance.createOrder(0, pickupTime.time);
				updateUI();
			}
			static private const BTN_CREATE_NEW:String = "Yes, Create New";
			private function onNew():void
			{
				if (!_order.customerID)
				{
					Dialog.alert(this, "Customer not selected.  Create new order anyway?", "Customer Missing", [BTN_CREATE_NEW, Dialog.BTN_CANCEL], onCreateNewPrompt);
				}
				else
				{
					newOrder();
				}
			}
			private function onCreateNewPrompt(e:DialogEvent):void
			{
				if (e.result == BTN_CREATE_NEW)
				{
					newOrder();
				}
			}
			private function onClose(e:Event):void
			{
				dispatchEvent(new Event(Event.COMPLETE));
			}
			
			private var _posCmd:PosCmd;
			private function attachPosListeners(p:PosCmd):void
			{
				p.addEventListener(PosCmdEvent.COMPLETE, onPosCmdResult, false, 0, true);
				p.addEventListener(PosCmdEvent.ERROR, onPosCmdResult, false, 0, true);
				p.addEventListener(PosCmdEvent.OUTPUT, onPosCmdResult, false, 0, true);
			}
			private function onPosCmdResult(e:PosCmdEvent):void
			{
				if (e.type == PosCmdEvent.ERROR )
				{
					Dialog.alert(this, "Point of sale hardware error: " + e.result, "Hardware Error", [Dialog.BTN_DONE]);
				}
				else if( e.type == PosCmdEvent.OUTPUT )
				{
					Dialog.alert(this, "Point of sale hardware output: " + e.result, "Hardware Output", [Dialog.BTN_DONE]);	
				}
				
				_posCmd = null;
			}
			private function onPrintTag():void
			{
				//KAI: copy pasta w/ OrderViewer
				if (_posCmd)
				{
					Dialog.alert(this, "Point of sale hardware busy", "Hardware Busy", [Dialog.BTN_DONE]);
				}
				else
				{					
					_posCmd = PosCmd.createPrintCmd(_order, true);
					attachPosListeners(_posCmd);
					_posCmd.run();
					
					const msg:String = "---Printing tag " + _order.id + " for " + customer.text + "; marking dropped off---";
					//Dialog.alert(this, msg, "Tag", [Dialog.BTN_DONE]);
	
					_order.status = Order.STATUS_DROPPED_OFF;
					Data.instance.writeOrderHistory(_order, msg);
					Data.instance.writeOrder(_order);
					
					if (!asPopup)
					{
						Utils.ViewOrder(_order, this);
						newOrder();
					}
				}
			}
			private function onSelectionUpdate(foo:int):void
			{
				incItem.enabled = decItem.enabled = foo >= 0;
			}
			private function onItem(e:Event):void
			{
				const rawItem:Object = Data.instance.getInventoryItem(parseInt(e.target.name));
				if (rawItem)
				{
					_order.addLineItem(rawItem.id);
					Data.instance.writeOrder(_order);

					itemList.selectedIndex = _order.items.length - 1;
					updateUI();
				}
			}
			private function onItemEditted(e:Event):void
			{
				Data.instance.writeOrder(_order);
				updateUI();
			}
			private function onIncItem():void
			{
				_order.incItem(itemList.selectedIndex);
				Data.instance.writeOrder(_order);
				
				updateUI();
			}
			private function onDecItem():void
			{
				_order.decItem(itemList.selectedIndex);
				Data.instance.writeOrder(_order);

				updateUI();
				
				onSelectionUpdate(itemList.selectedIndex);
			}
			private function onTimeChange():void
			{
				_order.pickupTime = date.selectedDate.setHours(time.selectedItem.value);
				Data.instance.writeOrder(_order);
			}
			private function onColorProperty(e:Event):void
			{
				if (itemList.selectedIndex >= 0)
				{
					const color:String = IFlexDisplayObject(e.target).name;
					_order.addProperty(itemList.selectedIndex, color);
					Data.instance.writeOrder(_order);
				}
			}
			private function updateStates()
			{
				var itemsAdded:Boolean =  _order.items.length > 0; 
				var customerAdded:Boolean = !!_order.customerID; 
				currentState = (customerAdded && itemsAdded ? "printReady" :										
					(customerAdded ? "needItems" : "needCustomer") );
		
			}
			private function updateUI():void
			{
				items.text = String(_order.items.length);
				total.text = Utils.currencyFormatter.format(_order.total);
				paid.text = Utils.currencyFormatter.format(_order.paid);
				
				paid.setStyle("color", _order.total == _order.paid ? 0x00ee00 : 0xff0000);

				var itemsAdded:Boolean =  _order.items.length > 0; 
				decItem.enabled = itemsAdded;
				incItem.enabled = itemsAdded;
				updateStates();

				statusLabel.text = _order.status.toUpperCase();

			}

			private var _customerList:CustomerList = new CustomerList;
			private var _currentPopup:IFlexDisplayObject;
			private function onSelectCustomer():void
			{
				var popup:Dialog = new Dialog;
				popup.title = "Choose Customer";
				popup.width = 700;
				popup.height = 500;
				_customerList.doubleClickEdits = false;
				_customerList.percentHeight = 100;
				_customerList.percentWidth = 100;
				popup.bodyContent = _customerList;
				popup.addButton(Dialog.BTN_DONE);

				PopUpManager.addPopUp(popup, this, true);
				PopUpManager.centerPopUp(popup);
				_currentPopup = popup;

				popup.addEventListener(Event.CLOSE, onCustomerChosen, false, 0, true);
				popup.addEventListener(Event.COMPLETE, onCustomerChosen, false, 0, true);
			}
			static private function formatCustomer(customerObj:Object):String
			{
				return customerObj.last + ", " + customerObj.first + " " + Utils.phoneFormatter.format(customerObj.phone);
			}
			private function onCustomerChosen(e:Event):void
			{
				if (e.type == Event.COMPLETE)
				{
					const customerObj:Object = _customerList.selectedCustomer;
					if (customerObj)
					{
						customer.text = formatCustomer(customerObj);
						
						if (_order.customerID != customerObj.id)
						{
							_order.customerID = customerObj.id;
							Data.instance.writeOrder(_order);
						}
					}
				}
				PopUpManager.removePopUp(_currentPopup);
				_currentPopup = null;
				
				updateUI();
			}
			private function dateFormatter(date:Date):String
			{
				return date ? date.toDateString() : "";
			}

			private var _order:Order;
			public function set order(o:Order):void
			{
				_order = o
				Data.instance.loadOrderHistory(_order);

				orderID.text = String(_order.id);
				customer.text = _order.customerID ? formatCustomer(Data.instance.getCustomer(_order.customerID)) : null;
				
				var d:Date = new Date();
				d.time = _order.pickupTime;
				date.selectedDate = d;

				const min:int = timeValues.getItemAt(0).value;
				const max:int = timeValues.getItemAt(timeValues.length-1).value;
				const hour:int = Math.min(Math.max(min, d.hours), max);
				time.selectedIndex = hour - min;
				
				itemList.items = _order.items;
				
				historyList.history = _order.history;

				updateUI();
			}
		]]>
	</fx:Script>

</s:VGroup>