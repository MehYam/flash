<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  paddingTop="5"
		  paddingBottom="5"
		  paddingLeft="5"
		  paddingRight="5"
		  creationComplete="onInit()"
		  >
	<fx:Declarations>
		<fx:Component id="priceColumnRenderer">
			<s:DefaultGridItemRenderer
				textAlign="right"
				/>
		</fx:Component>
	</fx:Declarations>
	<s:HGroup width="100%">
		<s:Label text="Search:" verticalAlign="middle" height="100%"/>
		<s:TextInput id="filter" prompt="enter partial name, number or customer ID" width="100%" height="{Data.BAR_HEIGHT}" change="onFilterChange()"/>
	</s:HGroup>
	<s:HGroup>
		<s:VGroup gap="10" height="100%" verticalAlign="middle">
			<s:CheckBox id="limitDropoffDate" label="Drop Off Dates:" selected="false" height="100%" change="onFilterChange()"/>
			<s:CheckBox id="limitPickupDate" label="Pickup Dates:" selected="true" height="100%" change="onFilterChange()"/>
		</s:VGroup>
		<s:VGroup>
			<s:HGroup id="dropoff" enabled="{limitDropoffDate.selected}">
				<mx:DateField id="dropoffFrom" width="160" scaleX="1.8" scaleY="1.8" change="onFilterChange()"/>
				<s:Label text="To:" verticalAlign="middle" height="100%"/>
				<mx:DateField id="dropoffTo" width="160" scaleX="1.8" scaleY="1.8" change="onFilterChange()"/>
			</s:HGroup>
			<s:HGroup enabled="{limitPickupDate.selected}">
				<mx:DateField id="pickupFrom" width="160" scaleX="1.8" scaleY="1.8" change="onFilterChange()"/>
				<s:Label text="To:" verticalAlign="middle" height="100%"/>
				<mx:DateField id="pickupTo" width="160" scaleX="1.8" scaleY="1.8" change="onFilterChange()"/>
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>
	<s:HGroup>
		<s:CheckBox id="showDrafts" label="Show Drafts" selected="true" height="100%" change="onFilterChange()"/>
		<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
		<s:CheckBox id="showDroppedoff" label="Show Dropped Off" selected="true" height="100%" change="onFilterChange()"/>
		<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
		<s:CheckBox id="showCompleted" label="Show Completed" selected="true" height="100%" change="onFilterChange()"/>
	</s:HGroup>
	<s:Line width="100%">
		<s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke>
	</s:Line>
	<s:HGroup id="buttonParent" width="100%" height="{Data.BAR_HEIGHT}">
		<s:Button height="100%" label="EDIT" styleName="commandButton" click="onEditOrder()"/>
		<s:Line height="100%"><s:stroke><s:SolidColorStroke color="#aaaaaa" weight="1"/></s:stroke></s:Line>
		<s:Button height="100%" label="DELETE" styleName="deleteButton" click="onDeleteOrder()"/>
	</s:HGroup>
	<s:DataGrid
		id="orders"
		width="100%" height="100%" 
		sortableColumns="true" 
		dataProvider="{Data.instance.orders}"
		doubleClick="onEditOrder()"
		doubleClickEnabled="true"
		selectionChange="updateButtons()"
		>
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="id" headerText="Ticket"/>
				<s:GridColumn labelFunction="customerLabelFunction" headerText="Customer" width="250"/>
				<s:GridColumn labelFunction="dropOffLabelFunction" headerText="Drop Off Time"/>
				<s:GridColumn labelFunction="pickUpLabelFunction" headerText="Pick Up Time"/>
				<s:GridColumn dataField="status" headerText="Status"/>
				<s:GridColumn dataField="total" headerText="Total" formatter="{Utils.currencyFormatter}" headerRenderer="CustomGridHeaderRenderer" itemRenderer="{priceColumnRenderer}"/>
				<s:GridColumn dataField="paid" headerText="Paid" formatter="{Utils.currencyFormatter}" headerRenderer="CustomGridHeaderRenderer" itemRenderer="{priceColumnRenderer}"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Label id="numShowing" text="Showing 0 of 0 total orders" verticalAlign="middle"/>

	<fx:Script>
		<![CDATA[
			import data.Data;
			import data.Order;
			
			import karnold.utils.Util;
			
			import mx.containers.Grid;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.managers.PopUpManager;
			
			import spark.events.GridSelectionEvent;
			
			import ui.Dialog;
			import ui.DialogEvent;
			private function onInit():void
			{
				filter.setFocus();
				
				var date:Date = Utils.beginningOfDay;
				date.time -= Utils.daysToTime(7);
				dropoffFrom.selectedDate = date;

				date = Utils.endOfDay;
				dropoffTo.selectedDate = date;

				date = Utils.beginningOfDay;
				date.time -= Utils.daysToTime(3);
				pickupFrom.selectedDate = date;
				
				date = Utils.endOfDay;
				date.time += Utils.daysToTime(7);
				pickupTo.selectedDate = date;
				
				onFilterChange();
				updateButtons();
			}
			static private function customerLabelFunction(orderObj:Order, column:GridColumn):String
			{
				const customerObj:Object = Data.instance.getCustomer(orderObj.customerID);
				return customerObj ? (customerObj.last + ", " + customerObj.first + ", " + Utils.phoneFormatter.format(customerObj.phone)) : "";
			}
			static private function dropOffLabelFunction(orderObj:Order, column:GridColumn):String
			{
				var date:Date = new Date;
				date.time = orderObj.creationTime;
				return date.toLocaleString();
			}
			static private function pickUpLabelFunction(orderObj:Order, column:GridColumn):String
			{
				var date:Date = new Date;
				date.time = orderObj.pickupTime;
				return date.toLocaleString();
			}
			private function onFilterChange():void
			{
				const pattern:Array = filter.text.toUpperCase().split(" ");
				const dropoffMin:Number = dropoffFrom.selectedDate.time;
				const dropoffMax:Number = dropoffTo.selectedDate.time + Utils.daysToTime(1);
				const pickupMin:Number = pickupFrom.selectedDate.time;
				const pickupMax:Number = pickupTo.selectedDate.time + Utils.daysToTime(1);
				
				Data.instance.orders.filterFunction = function(item:Order):Boolean
				{
					if (limitDropoffDate.selected && (item.creationTime < dropoffMin || item.creationTime > dropoffMax))
					{
						return false;
					}
					if (limitPickupDate.selected && (item.pickupTime < pickupMin || item.pickupTime > pickupMax))
					{
						return false;
					}
					if (!((item.status == Order.STATUS_DRAFT && showDrafts.selected) ||
						  (item.status == Order.STATUS_DROPPED_OFF && showDroppedoff.selected) ||
						  (item.status == Order.STATUS_COMPLETED && showCompleted.selected)))
					{
						return false;
					}

					const customer:Object = Data.instance.getCustomer(item.customerID);
					// AND all terms, each pattern part must match something
					for each (var patternPart:String in pattern)
					{
						if (!(Utils.matches(String(item.id), patternPart) || (customer && Utils.customerMatchesPattern(customer, patternPart))))
						{
							return false;
						}
					}
					return true;
				};
				Data.instance.orders.refresh();
				
				numShowing.text = "Showing " + Data.instance.orders.length + " of " + Data.instance.orders.source.length + " total orders";
				updateButtons();
			}
			private var _orderEditorPopup:Dialog;
			private function onEditOrder():void
			{
				const order:Order = Order(orders.selectedItem);
				if( order.status == "draft" )
				{
					if (!_orderEditorPopup)
					{
						_orderEditorPopup = Utils.createOrderEditorDialog();
					}
					OrderEditor(_orderEditorPopup.bodyContent).order = order;

					_orderEditorPopup.title = customerLabelFunction(order, null) + " Total:" + Utils.currencyFormatter.format(order.total) + ", Paid:" + Utils.currencyFormatter.format(order.paid);
					Utils.showDialog(this, _orderEditorPopup);// DisplayObject(parentApplication), _orderEditorPopup);
				}
				else
				{
					Utils.ViewOrder(order, this);
				}
			}

			private function hideEditor():void
			{
				if (_orderEditorPopup.parent)
				{
					PopUpManager.removePopUp(_orderEditorPopup);
				}
			}
			private function updateButtons():void
			{
				// can't find a way to get binding to do this w/o bugs
				buttonParent.enabled = orders.selectedIndex >= 0;
			}
			static private const BTN_DELETE:String = "Yes, Delete Order";
			private function onDeleteOrder():void
			{
				Dialog.alert(this, "Deleting this order is irreversable.  Proceed?", "Delete Order", [BTN_DELETE, Dialog.BTN_CANCEL], onDeletePrompt);
			}
			private function onDeletePrompt(e:DialogEvent):void
			{
				if (e.result == BTN_DELETE)
				{
					Data.instance.deleteOrder(Order(orders.selectedItem));
					updateButtons();
				}
			}
		]]>
	</fx:Script>
</s:VGroup>
